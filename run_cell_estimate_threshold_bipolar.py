from CellManager import CellManager
from neuron import h
import os, sys
from multiprocessing import Process
from time import sleep
import numpy as np
import time
from scipy.spatial.distance import cdist
import pandas as pd
import random
import matplotlib.pyplot as plt
from ConductionVelocity import ConductionVelocity
from InterpolateField import InterpolateField2Cell
from hoc2swc import neuron2swc
from swc2vtk import VtkGenerator as vtkgen
import pickle


def ez_record(h,var='v',sections=None,order=None,targ_names=None,cust_labels=None,level='section'):
	"""
	Records state variables across segments

	Args:
		h = hocObject to interface with neuron
		var = string specifying state variable to be recorded.
		      Possible values are:
		          'v' (membrane potential)
		          'cai' (Ca concentration)
		sections = list of h.Section() objects to be recorded
		targ_names = list of section names to be recorded; alternative
		             passing list of h.Section() objects directly
		             through the "sections" argument above.
		cust_labels =  list of custom section labels
		level = 'section' or 'segment', determines if one or many positions are recorded for each section

	Returns:
		data = list of h.Vector() objects recording membrane potential
		labels = list of labels for each voltage trace
	"""
	data, labels = [], []
	for i in range(len(sections)):
		sec = sections[i]
		if level=='section':
			# record data
			data.append(h.Vector())
			if var == 'v':
				data[-1].record(sec(0.5)._ref_v)
			elif var == 'cai':
				data[-1].record(sec(0.5)._ref_cai)
			# determine labels
			if cust_labels is None:
				lab = sec.name()+'_'+str(round(0.5,5))
			else: 
				lab = cust_labels[i]+'_'+str(round(0.5,5))
			labels.append(lab)
		else:
			positions = np.linspace(0,1,sec.nseg+2)
			for position in positions[1:-1]:
				# record data
				data.append(h.Vector())
				if var == 'v':
					data[-1].record(sec(position)._ref_v)
				elif var == 'cai':
					data[-1].record(sec(position)._ref_cai)
				# determine labels
				if cust_labels is None:
					lab = sec.name()+'_'+str(round(position,5))
				else: 
					lab = cust_labels[i]+'_'+str(round(position,5))
				labels.append(lab)
	return (data, labels)

def ez_convert(data):
    """
    Takes data, a list of h.Vector() objects filled with data, and converts
    it into a 2d numpy array, data_clean. This should be used together with
    the ez_record command. 
    """
    data_clean = np.empty((len(data[0]),len(data)))
    for (i,vec) in enumerate(data):
        data_clean[:,i] = vec.to_python()
    return data_clean

def find_section_type(cell,section):
	if section in cell.node:
		return('node')
	if section in cell.paranode1:
		return('paranode1')
	if section in cell.paranode2:
		return('paranode2')
	if section in cell.internode:
		return('internode')
	if section in cell.interbouton:
		return('interbouton')
	if section in cell.bouton:
		return('bouton')
	

def exvoltage(cellname,cellnum,cell,stimamp,timeeVec,elec):
	playVecs = []
	interp = InterpolateField2Cell(cellname,cellnum,cell,elec)
	solutions = interp.cell_solutions
	for sec_num,sec in enumerate(cell.all):
#		if sec in cell.bouton:
#			continue
		sec.push() #inserting biophysics or setting section parameters requires "loading (push)" 	
		voltages,interval = apply_ideal_voltage_waveform(stimamp*solutions[sec_num],delay=timeeVec[0])
#		print(voltages,find_section_type(cell,sec))
		playVecs.append(h.Vector(voltages))
		playVecs[-1].play(sec(0.5)._ref_e_extracellular, timeeVec) #0.5 signifies midpoint of section
		h.pop_section() #"loaded" cells must be "unloaded" prior to doing the same for other sections
	
	return(playVecs,interp.centers,[solution*stimamp for solution in solutions])

def exvoltage_bipolar(cellname,cellnum,cell,stimamp,timeeVec,elec1,elec2):
	playVecs = []
	interp = InterpolateField2Cell(cellname,cellnum,cell,elec1)
	solutions1 = interp.cell_solutions
	interp = InterpolateField2Cell(cellname,cellnum,cell,elec2)
	solutions2 = interp.cell_solutions
	solutions = [(-1*solutions1[i])+solutions2[i] for i in range(len(solutions1))]
	for sec_num,sec in enumerate(cell.all):
#		if sec in cell.bouton:
#			continue
		sec.push() #inserting biophysics or setting section parameters requires "loading (push)" 	
		voltages,interval = apply_ideal_voltage_waveform(stimamp*solutions[sec_num],delay=timeeVec[0])
#		print(voltages,find_section_type(cell,sec))
		playVecs.append(h.Vector(voltages))
		playVecs[-1].play(sec(0.5)._ref_e_extracellular, timeeVec) #0.5 signifies midpoint of section
		h.pop_section() #"loaded" cells must be "unloaded" prior to doing the same for other sections
	
	return(playVecs,interp.centers,[solution*stimamp for solution in solutions])

def apply_ideal_voltage_waveform(voltage,pw=125,delay=4):
	"""
	units:
	pw - microseconds
	vvoltages -Volts
	
	"""
	delay=delay*1000.0
	intervals = np.array([0+delay,pw+delay,pw+10.0+delay,pw+10.0+delay+pw*5])/1000.0
	amplitudes = np.array([voltage,0,voltage/-5,0])
	return(amplitudes,intervals)

def stimulator(sec,amp):
	stim = h.IClamp(sec(0.5))
	vec = h.Vector()
	netcon = h.NetCon(sec(0.5)._ref_v, None, sec=sec)
	netcon.record(vec)
	stim.dur = 0.5
	stim.amp = amp
	stim.delay = 4
	return(stim,vec)

def latest_spike(ndat):
	maxts = 0
	for d in ndat:
		mx = np.max(d)
		if mx<-10.0:
			continue
		dmax = list(d).index(np.max(d))
		if dmax > maxts:
			maxts=dmax
	
	if maxts == 0:
		maxts=len(ndat[0])
	
#	print(maxts,'maxts')
	return(maxts*h.dt)

def check_prestim_slope(ndat):
	sum_diff = 0
	for n in ndat:
		sum_diff+=n[int(3.875/h.dt)]-n[int(1.0/h.dt)]
	return(np.abs(2*sum_diff/float(len(ndat))))

def check_single_spike(ndat):
	multiples = []
	for n in ndat:
		multiples.append(count_independent_crossings(n))
	
	return(multiples)

def earliest_spike(ndat):
	mints = len(ndat[0])
	for d in ndat:
		mx = np.max(d)
		if mx<-10.0:
			continue
		
		dmax = list(d).index(mx)
		if dmax < mints:
			mints=dmax
	
	if mints == len(ndat[0]):
		mints = 0
#	print(mints,'mints')
	return(mints*h.dt)

def count_independent_crossings(array):
	positive = [list(array).index(i) for i in array if i > -10]
	spcount = 0
	for pos in positive:
		if pos-1 or pos+1 not in positive:
			spcount+=1
	
	return(spcount/2)

def single_spike(ndat):
	for n in ndat:
		crossings = count_independent_crossings(n)
		if crossings!=1:
			return(False)
	
	return(True)

def on_cost_function(data):
		ndat = np.transpose(data)
		sptime = [latest_spike(ndat),earliest_spike(ndat)]
		print(sptime,'late,early')
		threshold=False
		score = sptime[0]-sptime[1]
		if sptime[1] < 4.0625:
			score+=100
		
#		multiples = check_single_spike(ndat)
#		if 0 in multiples:
#			score+=100
#		for m in multiples:
#			if m>1:
#				score+=5
		
#		print(multiples,'multiples')
		score+=check_prestim_slope(ndat)
#		print(check_prestim_slope(ndat),'prestim slope')
		score+=np.abs(sptime[1]-4.0625)
		
		return(score)

def output_sptime_params(params,score):
	with open('parallelresults.txt','a') as f:
		f.write(str(params)+'\n'+str(score)+'\n')

def modify_biophys(cell,bphys):
	for section in cell.interbouton:
		section.gkbar_axnodeX = bphys['k_ib']
		section.gnabar_axnodeX = bphys['na_ib']
		section.gnapbar_axnodeX = 0.0
		section.gl_axnodeX = bphys['gl_ib']
		section.gbar_na12 = bphys['gbar_ib']
	
	for section in cell.bouton:
		section.gkbar_axnodeX = bphys['k_b']
		section.gnabar_axnodeX = bphys['na_b']
		section.gnapbar_axnodeX = 0.0
		section.gl_axnodeX = bphys['gl_b']
		section.gbar_na12 = bphys['gbar_b']
	
	h.amA_axnodeX = bphys['amA']
	h.amB_axnodeX = bphys['amB']
	h.amC_axnodeX = bphys['amC']
	h.bmA_axnodeX = bphys['bmA']
	h.bmB_axnodeX = bphys['bmB']
	h.bmC_axnodeX = bphys['bmC']
	h.ahA_axnodeX = bphys['ahA']
	h.ahB_axnodeX = bphys['ahB']
	h.ahC_axnodeX = bphys['ahC']
	h.asA_axnodeX = bphys['asA']
	h.asB_axnodeX = bphys['asB']
	h.asC_axnodeX = bphys['asC']
	
	return(cell)

def plot_v_traces(clean_data,timestop,labels):
	import matplotlib.pyplot as plt
	fig = plt.figure()
	plt.title('r-ais/hil/nd; g-pnd; k-internd; c-bt; m-interbt')
	colors = dict(zip(['soma','hillock','iseg','apical','basal','node','paranode1','paranode2','internode','bouton','interbouton','tuft'],['y','r','r','y','y','r','g','g','k','c','m','y']))
	for i in range(0,len(clean_data[0]),35)[::-1]:
		plt.plot(np.arange(0,timestop+h.dt,h.dt),[item[i] for item in clean_data],color=colors[labels[i]],label='Section '+str(i))
		plt.xlabel('ms')
		plt.ylabel('mV')
#		plt.legend(loc='upper right')
#		plt.pause(0.025)
	
	plt.show()

def get_section_centers(sections):
	centers = []
	for section in sections:
		section.push()
		secCount = h.n3d()
		if secCount%2==1:
			centers.append(np.array([h.x3d(int(secCount/2)),h.y3d(int(secCount/2)),h.z3d(int(secCount/2))]))
		
		else:
			a = [h.x3d(int(secCount/2)),h.y3d(int(secCount/2)),h.z3d(int(secCount/2))]
			b = [h.x3d(int(secCount/2)-1),h.y3d(int(secCount/2)-1),h.z3d(int(secCount/2)-1)]
			centers.append(np.array(self.midpoint(a,b)))
		
		h.pop_section()
	
	return(centers)

def instrument_sptimes(cell):
	ncs = []
	sptimes = []
	sptimes.append(h.Vector())
	cell.node[0].push()
	ncs.append(h.NetCon(cell.node[0](0.5)._ref_v,None).record(sptimes[-1]))
	h.pop_section()
	for b,bouton in enumerate(cell.bouton):
		cell.bouton[b].push()
		sptimes.append(h.Vector())
		ncs.append(h.NetCon(cell.bouton[b](0.5)._ref_v,None).record(sptimes[-1]))
		h.pop_section()
	for i,interbouton in enumerate(cell.interbouton):
		cell.interbouton[i].push()
		sptimes.append(h.Vector())
		ncs.append(h.NetCon(cell.interbouton[i](0.5)._ref_v,None).record(sptimes[-1]))
		h.pop_section()
	
	return(ncs,sptimes)

def run_cell_modifybiophys(cellname,cellnum,stimamp_scalar,fnames,plot=True,electrode=[2,3],biophysics={},write_sptimes=False,outer=4.0):
	h.load_file("stdrun.hoc") #this loads standard simulation initialized variables
	stimtimevec = [4.0,4.060,4.070,4.370]
	h.tstop = 15.0
	h_stimtimevec = h.Vector(stimtimevec)
	h.celsius = 37
	h.v_init = -80
	h.finitialize(h.v_init)
	h.stdinit()
	h.steps_per_ms = 67
	h.dt = 1/67
	single_axon = CellManager(fnames[0],fnames[1],fnames[2],CCF_outer=outer)
	single_axon = modify_biophys(single_axon,biophysics)
#	data,labels = ez_record(h,var='v',sections=list(single_axon.node+single_axon.paranode1+single_axon.paranode2+single_axon.internode+single_axon.bouton+single_axon.interbouton))
	data,labels = ez_record(h,var='v',sections=list(single_axon.all))
	stim,centers,solutions = exvoltage_bipolar(cellname[:-3]+'_section_centers.csv',cellnum,single_axon,stimamp_scalar,h_stimtimevec,electrode[0],electrode[1])
	ncs = []
	sptimes = []
	if write_sptimes:
		ncs,sptimes = instrument_sptimes(single_axon)
	
#	stim = stimulator(single_axon.bouton[int(len(single_axon.bouton)/2)],stimamp_scalar)
	h.run()
	if write_sptimes:
		sps = pd.DataFrame()
		for s in range(len(sptimes)):
			try:
				sps[s] = list(sptimes[s])
				if sps[s] == []:
					del(sps[s])
			except:
				continue
		
		sps.to_csv(str(cellnum)+'_'+str(outer)+'_sptimes.csv')
		print('wrote sptimes.pickle')
	
	clean_data = ez_convert(data)
	if plot:
		sectypes = pd.read_csv(fnames[1])
		plot_v_traces(clean_data,h.tstop,list(sectypes.sectionType))
	
	return(single_axon,clean_data,stim,centers,solutions,sptimes)


def off_cost_function(data):
	if np.max(data)> -50:
		return(100)
	else:
		return(0)

def get_biophys_params():
	return([
	[0.6401149674072607, 0.2564761754950161, 6.404692167595571, 6.663893590081459, 0.08309356220269797, 0.054275342868472604, 0.005398070607462196, 0.023933348322956786, 2.450879163264583, 25.82197034285185, 10.461674620371362, 0.1272878459750605, 14.397363961827288, 9.361117413679018, 0.072665983829006, 114.89995221232232, 6.708060587149276, 0.21950433977416367, -37.5752213864083, -4.062916980066408, 964.6280608962525, 908.7444557028156], 
	[0.943253509912807, 0.4896626091761113, 6.550113934854596, 6.490186173040279, 0.06525454529597853, 0.06484816939401927, 0.005506096136576518, 0.02354806709661391, 2.42766843181409, 25.809383609595564, 10.464491780843225, 0.1266228319444507, 14.360083904099818, 9.820425853437577, 0.07599136305970208, 114.89995221232232, 6.7726479051274815, 0.21396069730405587, -38.091036461391894, -4.319456229937833, 1080.7950740227707, 1203.537845670036], 
	[0.6401149674072607, 0.2564761754950161, 6.404692167595571, 6.663893590081459, 0.08309356220269797, 0.02738865702646247, 0.005481947671584775, 0.023902522910854256, 2.479902730649699, 25.79828852941519, 10.463701154203202, 0.12680742627498093, 14.354758181567323, 9.361117413679018, 0.072665983829006, 114.89995221232232, 6.6707766094824885, 0.21572046251332944, -38.09047910098887, -4.040674479240261, 959.6535222735755, 836.506778036165], 
	[0.18672155421836606, 0.603791278697492, 6.258065129504445, 6.582308648159701, 0.05435006552186174, 0.06536877777199623, 0.005487661787069057, 0.02393601541078396, 2.4278529537795452, 25.926403007839674, 10.460231411130199, 0.1266600626143074, 14.290849511177374, 6.975433544121312, 0.07257949720990577, 114.89995221232232, 6.76398655364946, 0.3293583708779374, -34.88831212330314, -3.8577611027590155, 975.9332722577404, 997.4075145045241], 
	[0.7145240027866426, 0.48561799152634333, 6.3989318274289255, 6.523997626105697, 0.09332242420125698, 0.0689651861062337, 0.005544690597630154, 0.02371481259668876, 2.4458498045280384, 25.87979579572207, 10.461214001593031, 0.12667848307189158, 14.290849511177374, 8.609379689624042, 0.07224315763511124, 114.89995221232232, 6.745344564816065, 0.20799237179606786, -37.38852207375201, -4.040674479240261, 1474.4968818011164, 1328.6539437998422], 
	[0.6401149674072607, 0.2564761754950161, 6.404692167595571, 6.663893590081459, 0.06281767481353537, 0.04730910323368476, 0.005481947671584775, 0.024033667029826615, 2.4218555958794674, 25.845652156288505, 10.459648086539524, 0.12776826567514007, 14.439969742087255, 5.76841414100182, 0.07273034919208554, 114.89995221232232, 6.819912520149643, 0.20325505138466404, -38.41308259851864, -4.28866897195367, 650.9145948767425, 916.4180055877896], 
	[0.5706404839992643, 0.6687308129494317, 6.366359241899692, 6.573513990988729, 0.04300630857828462, 0.039185287095145724, 0.005295499128903097, 0.024033667029826615, 2.4218555958794674, 25.845652156288505, 10.459648086539524, 0.12673374444464416, 14.439969742087255, 9.438358299973626, 0.07273034919208554, 114.89995221232232, 6.819912520149643, 0.25469752797510503, -38.41308259851864, -4.28866897195367, 991.4704165552515, 916.4180055877896], 
	[0.33740795106120625, 0.6403428187381299, 6.380863377588476, 6.5163502133765885, 0.058323548593765186, 0.0560141772019799, 0.005226446298657506, 0.023892946680863097, 2.435880991466129, 25.90895298074503, 10.460983692203865, 0.1266876933006837, 14.201137214911508, 6.333849159392492, 0.0723974642057725, 114.89995221232232, 6.745344564816065, 0.27978548690310545, -35.19803360332611, -3.9402455283304207, 459.66105795734063, 912.5812306453026], 
	[0.6706999617376601, 0.6845699303635634, 6.284113915124372, 6.6115555089608105, 0.0018731444850034085, 0.002901483255531312, 0.005519927825500604, 0.02406864133720213, 2.4217438124965236, 25.91766183633898, 10.458688503416504, 0.12674793173855495, 14.290849511177374, 6.73383976677693, 0.07384320499623717, 114.89995221232232, 6.805931028524597, 0.2528566150070669, -37.46533561079921, -4.01440594000232, 882.4042934019427, 1207.544138541215], 
	[0.7200451593844786, 0.38072833353593305, 6.652081790724704, 5.794425980958039, 0.08309356220269797, 0.009882250963737328, 0.005481947671584775, 0.022935450053051268, 2.329584185546312, 25.86532302612431, 10.472052701155242, 0.12485025193065963, 13.673065697407866, 5.030517456902732, 0.09034858966985225, 114.89995221232232, 6.8146353766402346, 0.22313510025569902, -37.88154361271545, -4.715652385697382, 387.712883098568, 977.2790942555614], 
	[0.5706404839992643, 0.6687308129494317, 6.366359241899692, 6.573513990988729, 0.04300630857828462, 0.039185287095145724, 0.005295499128903097, 0.024033667029826615, 2.4218555958794674, 25.845652156288505, 10.459648086539524, 0.12673374444464416, 14.439969742087255, 9.438358299973626, 0.07273034919208554, 114.89995221232232, 6.819912520149643, 0.25469752797510503, -38.41308259851864, -4.28866897195367, 991.4704165552515, 916.4180055877896], 
	[0.613552576704224, 0.28304327756154435, 6.380329056821594, 6.59644802451725, 0.07699126612107238, 0.048241955243565074, 0.005512128228584389, 0.02366075469640351, 2.4721396291483986, 25.844628243952773, 10.46578904094121, 0.12673374444464416, 14.269546621047391, 8.253918610273365, 0.07284619819028745, 114.89995221232232, 6.6707766094824885, 0.2488991598595927, -37.98335321733861, -4.056515291533102, 1167.054703825007, 1094.8936854286676], 
	[0.5446513290729289, 0.4590508894598151, 6.357005332036428, 6.5914431916699066, 0.06640264632923505, 0.048520273621281376, 0.00551451004063054, 0.023956580811139504, 2.451319404902824, 25.86229041372851, 10.461198663366488, 0.12670611375826787, 14.312152401307358, 12.556338780586259, 0.07239486558866219, 114.89995221232232, 6.736023570399368, 0.21959447880940863, -37.82330461089859, -4.039622622717464, 1244.5289197306765, 1237.0228733404974], 
	[0.5002446147649894, 0.4177031550428375, 6.259189575897566, 6.633075668372825, 0.05950280224502155, 0.04022115159076317, 0.005490043599115209, 0.023996457464396645, 2.4297937291548704, 25.914695849911354, 10.459709439445696, 0.126623221699139, 14.269546621047391, 4.792516777222875, 0.07176487857427247, 114.89995221232232, 6.782628542482854, 0.34006663403204723, -38.30595671486839, -4.004785428563391, 1075.5743886137798, 916.4180055877896], 
	[0.18672155421836606, 0.603791278697492, 6.258065129504445, 6.582308648159701, 0.05435006552186174, 0.06536877777199623, 0.005487661787069057, 0.02393601541078396, 2.4278529537795452, 25.89150295365039, 10.461735973277534, 0.1266600626143074, 13.361784370427022, 8.839596550477692, 0.07178974924227133, 114.89995221232232, 6.819912520149643, 0.20325505138466404, -38.41308259851864, -4.28866897195367, 991.4704165552515, 1207.544138541215], 
	[0.7311214581742733, 0.5636096118956889, 6.0926967743676705, 6.6367926389069485, 0.018482253751271778, 0.007165887277382118, 0.005257794990974986, 0.02362920012568358, 2.4901364798968912, 25.797776573247322, 10.466771631404045, 0.12680742627498093, 14.312152401307358, 8.509709682231124, 0.07376810199826832, 114.89995221232232, 6.6334926318157, 0.22333667072897068, -38.194664346454246, -4.040674479240261, 654.2886324273312, 836.506778036165], 
	[0.5869901860011872, 0.3096103796280726, 6.355965946047618, 6.529002458953041, 0.07088897003944679, 0.06909525346066768, 0.005542308785584003, 0.023418986481952765, 2.4643765276470977, 25.890967958490357, 10.467876927679221, 0.1266600626143074, 14.18433506052746, 7.146719806867711, 0.07302641255156889, 114.89995221232232, 6.6707766094824885, 0.282077857205856, -37.87622733368835, -4.072356103825943, 859.6125258488973, 916.4180055877896], 
	[0.6401149674072607, 0.2564761754950161, 6.404692167595571, 6.663893590081459, 0.08309356220269797, 0.02738865702646247, 0.005481947671584775, 0.023902522910854256, 2.479902730649699, 25.79828852941519, 10.463701154203202, 0.12680742627498093, 14.354758181567323, 9.361117413679018, 0.072665983829006, 114.89995221232232, 6.6707766094824885, 0.21572046251332944, -38.09047910098887, -4.040674479240261, 1474.4968818011164, 1118.6084176790064], 
	[0.18672155421836606, 0.603791278697492, 6.404692167595571, 6.663893590081459, 0.03672041082384166, 0.03757098182203885, 0.005398070607462196, 0.023933348322956786, 2.450879163264583, 25.82197034285185, 10.461674620371362, 0.1272878459750605, 14.397363961827288, 9.361117413679018, 0.072665983829006, 114.89995221232232, 6.6707766094824885, 0.21572046251332944, -38.09047910098887, -4.040674479240261, 1474.4968818011164, 1328.6539437998422], 
	[0.534982237592997, 0.37739641015588216, 6.295565223822067, 6.640780148799983, 0.060331520387150006, 0.04199313950149357, 0.0054880196172326, 0.024005759855754136, 2.4278091958360193, 25.897434926505642, 10.459694101219153, 0.12690948269313929, 14.312152401307358, 5.0364911181676115, 0.07200624622872573, 114.89995221232232, 6.791949536899551, 0.3058637383702014, -38.332738185780954, -4.0757563144109605, 969.4094401795205, 594.4343569753939], 
	[0.8536977329083216, 0.3672569220328543, 6.366359241899692, 6.896573963357364, 0.04300630857828462, 0.039185287095145724, 0.005295499128903097, 0.024033667029826615, 2.4218555958794674, 25.845652156288505, 10.459648086539524, 0.12776826567514007, 14.439969742087255, 9.438358299973626, 0.07273034919208554, 114.89995221232232, 6.819912520149643, 0.20325505138466404, -38.41308259851864, -4.28866897195367, 991.4704165552515, 916.4180055877896], 
	[0.6401149674072607, 0.2564761754950161, 6.404692167595571, 6.663893590081459, 0.08309356220269797, 0.04730910323368476, 0.005481947671584775, 0.023902522910854256, 2.479902730649699, 25.79828852941519, 10.463701154203202, 0.12680742627498093, 14.354758181567323, 6.592012772104467, 0.072665983829006, 114.89995221232232, 6.6707766094824885, 0.21572046251332944, -38.194664346454246, -4.100324748356392, 1087.692672565825, 1189.617172635133], 
	[0.6401149674072607, 0.9382802963022384, 6.388806307590841, 6.565531338944878, 0.07369344857983122, 0.03997768826747237, 0.005512128228584389, 0.023896138757526816, 2.463846655276531, 25.833188583604468, 10.462196592055864, 0.12675216490222835, 14.132727808775625, 7.8751815415621085, 0.07303004983727254, 114.89995221232232, 6.708060587149276, 0.21950433977416367, -37.5752213864083, -3.8757056280974505, 964.6280608962525, 908.7444557028156], 
	[0.5446513290729289, 0.4590508894598151, 6.357005332036428, 6.5914431916699066, 0.027188585274268484, 0.048520273621281376, 0.00551451004063054, 0.023956580811139504, 2.451319404902824, 25.86229041372851, 10.461198663366488, 0.12670611375826787, 14.312152401307358, 9.10894886648699, 0.07196242845448383, 114.89995221232232, 6.736023570399368, 0.2367270382877935, -37.82330461089859, -4.009797488159398, 1027.8268996614297, 1011.7602310151171], 
	[0.5869901860011872, 0.3096103796280726, 6.355965946047618, 6.529002458953041, 0.07088897003944679, 0.08665476919018061, 0.005542308785584003, 0.023418986481952765, 2.4643765276470977, 25.890967958490357, 10.467876927679221, 0.1266600626143074, 14.18433506052746, 7.616236634994856, 0.07302641255156889, 114.89995221232232, 6.6707766094824885, 0.282077857205856, -37.87622733368835, -4.072356103825943, 859.6125258488973, 690.0720554781401], 
	[0.7217267372259288, 0.66971483872415, 6.744261923661574, 6.451369887127516, 0.09594798361460474, 0.043041569597857945, 0.005469883487569032, 0.023677147711275055, 2.3754341329784814, 25.820478689775936, 10.465282407483251, 0.12643823761392048, 14.365409626632314, 9.331291811057685, 0.07931674229039817, 114.89995221232232, 6.874519200772474, 0.2122009320947823, -38.09159382179491, -4.598237980635405, 687.0932662444247, 852.0977019167565], 
	[0.6371495863128875, 0.48823447372304507, 6.380848749816, 6.627668390875683, 0.07474810426596651, 0.04548185654395062, 0.005498228856107658, 0.023929551860996878, 2.4656110677762615, 25.83028947157185, 10.462449908784844, 0.1267567700166244, 14.33345529143734, 9.574175776345363, 0.0725304247088341, 114.89995221232232, 6.703400089940928, 0.2383630593147428, -38.00898447867642, -4.040148550978863, 949.4087760790039, 988.057380662435], 
	[0.6706999617376601, 0.6845699303635634, 6.284113915124372, 6.6115555089608105, 0.0018731444850034085, 0.002901483255531312, 0.005519927825500604, 0.02406864133720213, 2.4217438124965236, 25.91766183633898, 10.458688503416504, 0.12674793173855495, 14.290849511177374, 6.73383976677693, 0.07384320499623717, 114.89995221232232, 6.805931028524597, 0.2528566150070669, -37.46533561079921, -4.01440594000232, 882.4042934019427, 714.0549659211224], 
	[0.722822730480458, 0.5246138017110161, 6.245814300898298, 6.580395132506323, 0.04644387904887129, 0.037915172059731196, 0.0054012427943025704, 0.02367200636118617, 2.467993142212465, 25.838786184484697, 10.46399281649854, 0.12674295467343627, 14.301500956242366, 8.559544685927584, 0.07300562981668979, 114.89995221232232, 6.689418598315882, 0.21566452126251928, -37.92922199466257, -4.033682318107648, 908.5393960889171, 347.52906368130334], 
	[0.5697198604210046, 0.3370896652689268, 6.331940871746569, 6.648484629227142, 0.06116023852927846, 0.043765127412223964, 0.005485995635349992, 0.02401506224711163, 2.4258246625171687, 25.88017400309993, 10.45967876299261, 0.12719574368713954, 14.354758181567323, 5.280465459112348, 0.072247613883179, 114.89995221232232, 6.8012705313162485, 0.27166084270835567, -38.359519656693514, -4.14672720025853, 863.2444917452611, 272.4507083629982], 
	[0.6955140277476786, 0.2662755872857282, 6.272662606426676, 6.582330869121638, 0.0698437597734824, 0.04548173253501428, 0.005512128228584389, 0.023896138757526816, 2.463846655276531, 25.833188583604468, 10.462196592055864, 0.12675216490222835, 14.132727808775625, 7.8751815415621085, 0.07303004983727254, 114.89995221232232, 6.708060587149276, 0.21950433977416367, -37.5752213864083, -3.8757056280974505, 1374.326944654854, 908.7444557028156], 
	[0.7334757547711348, 0.6687993151596922, 6.518803747736168, 6.287329878838725, 0.07307174879659463, 0.026564723064076284, 0.005435335535914356, 0.02345177251169585, 2.390231674405448, 25.84364668448808, 10.466863660763302, 0.12606904895286006, 14.035214829617576, 9.376848707439327, 0.08152337809019902, 114.89995221232232, 6.77998997072815, 0.21631142860234787, -38.092708542600946, -4.455074622926206, 713.6472138295532, 688.8160318102455], 
	[0.5960793688747699, 0.27212300018093216, 6.189359266805735, 6.635659279290233, 0.0015194372520554334, 0.00029569730317769994, 0.00542825116446181, 0.023861392110143168, 2.443909029152713, 25.89150295365039, 10.461735973277534, 0.1266600626143074, 13.361784370427022, 8.839596550477692, 0.07178974924227133, 114.89995221232232, 6.819912520149643, 0.20325505138466404, -38.41308259851864, -4.28866897195367, 991.4704165552515, 1207.544138541215], 
	[0.47436425893625944, 0.833344727205584, 6.388806307590841, 6.565531338944878, 0.09060979288154565, 0.03997768826747237, 0.005512128228584389, 0.023896138757526816, 2.463846655276531, 25.833188583604468, 10.462196592055864, 0.12675216490222835, 14.132727808775625, 7.8751815415621085, 0.07303004983727254, 114.89995221232232, 6.708060587149276, 0.21950433977416367, -37.5752213864083, -3.8757056280974505, 964.6280608962525, 908.7444557028156], 
	[0.5732326841496979, 0.49172498374303, 6.518803747736168, 6.287329878838725, 0.07849167273842574, 0.04534112090718029, 0.005435335535914356, 0.02345177251169585, 2.390231674405448, 25.84364668448808, 10.466863660763302, 0.12606904895286006, 14.035214829617576, 9.376848707439327, 0.08152337809019902, 114.89995221232232, 6.77998997072815, 0.271455719276799, -38.092708542600946, -4.455074622926206, 1161.9825158527274, 916.4180055877896], 
	[0.696761346109059, 0.6045918660372898, 6.264964108011335, 6.595975320733567, 0.024158511766937348, 0.054725542952006295, 0.0054605853099015875, 0.02387032384919415, 2.444868477354494, 25.878224010411838, 10.461340659957521, 0.12674544320599562, 14.29617523370987, 7.646692226352257, 0.07342441740646348, 114.89995221232232, 6.74767481342024, 0.2342605681347931, -37.69727880273089, -4.024044129054984, 895.47184474543, 1408.1850966635602], 
	[0.7040668917971271, 0.6197124989520479, 6.367854715124365, 6.823321994281462, 0.006515999919506743, 0.019841351162805936, 0.005295499128903097, 0.024033667029826615, 2.4218555958794674, 25.845652156288505, 10.459648086539524, 0.12725100505989212, 14.439969742087255, 9.438358299973626, 0.07273034919208554, 114.89995221232232, 6.819912520149643, 0.21807932353396647, -38.41308259851864, -4.28866897195367, 406.167246127019, 916.4180055877896], 
	[0.5960793688747699, 0.05408482208608578, 6.189359266805735, 6.635659279290233, 0.09941235305084314, 0.00029569730317769994, 0.00551451004063054, 0.023956580811139504, 2.451319404902824, 25.86229041372851, 10.461198663366488, 0.12670611375826787, 14.312152401307358, 9.10894886648699, 0.07196242845448383, 114.89995221232232, 6.736023570399368, 0.2367270382877935, -37.82330461089859, -4.009797488159398, 1027.8268996614297, 1011.7602310151171], 
	[0.5707131183435599, 0.5908892277496571, 6.362658067198328, 6.6395362420793, 0.06383072641990664, 0.03484138560881824, 0.00541890395724355, 0.02372632675588969, 2.450879163264583, 25.82197034285185, 10.461674620371362, 0.12677058535981256, 14.397363961827288, 11.999662908912104, 0.07269816651054578, 114.89995221232232, 6.745344564816065, 0.22431202909829917, -38.25178084975376, -4.164671725596966, 1232.983649178184, 1050.8001974228616], 
	[0.5869901860011872, 0.3096103796280726, 6.355965946047618, 6.663893590081459, 0.08309356220269797, 0.08771726587513007, 0.005481947671584775, 0.023902522910854256, 2.479902730649699, 25.79828852941519, 10.463701154203202, 0.12680742627498093, 14.354758181567323, 9.361117413679018, 0.072665983829006, 114.89995221232232, 6.6707766094824885, 0.21572046251332944, -37.38852207375201, -4.040674479240261, 1474.4968818011164, 1328.6539437998422], 
	[0.6401149674072607, 0.2564761754950161, 6.404692167595571, 6.663893590081459, 0.08309356220269797, 0.02738865702646247, 0.005481947671584775, 0.023902522910854256, 2.479902730649699, 25.79828852941519, 10.463701154203202, 0.12680742627498093, 14.354758181567323, 9.361117413679018, 0.072665983829006, 114.89995221232232, 6.6707766094824885, 0.21572046251332944, -38.09047910098887, -4.040674479240261, 1474.4968818011164, 1328.6539437998422], 
	[0.5869901860011872, 0.3096103796280726, 6.355965946047618, 6.529002458953041, 0.07088897003944679, 0.08665476919018061, 0.005542308785584003, 0.023418986481952765, 2.479902730649699, 25.79828852941519, 10.463701154203202, 0.12680742627498093, 14.354758181567323, 9.361117413679018, 0.072665983829006, 114.89995221232232, 6.6707766094824885, 0.21572046251332944, -38.09047910098887, -4.040674479240261, 1474.4968818011164, 1328.6539437998422], 
	[0.7145240027866426, 0.48561799152634333, 6.3989318274289255, 6.523997626105697, 0.09332242420125698, 0.0689651861062337, 0.005544690597630154, 0.02371481259668876, 2.4458498045280384, 25.87979579572207, 10.461214001593031, 0.12667848307189158, 14.290849511177374, 8.609379689624042, 0.07224315763511124, 114.89995221232232, 6.745344564816065, 0.20799237179606786, -37.66377964287089, -4.026690156975036, 1162.790159750503, 691.9703263956812], 
	[0.7099777196807228, 0.670630362288608, 6.969720099586979, 6.615409895416308, 0.04545738507783525, 0.0595184161316396, 0.005504431439223708, 0.023902522910854256, 2.360636591551515, 25.797310695063793, 10.463701154203202, 0.12680742627498093, 14.695604423647053, 9.285734914676045, 0.07711010649059734, 114.89995221232232, 6.969048430816796, 0.20809043558721674, -38.09047910098887, -4.741401338344603, 660.5393186592962, 1015.3793720232674], 
	[0.30497520178230025, 0.5411123454289446, 6.245716545368456, 6.570816498708409, 0.05987621104872645, 0.049941763273440194, 0.00542825116446181, 0.023861392110143168, 2.443909029152713, 25.89150295365039, 10.461735973277534, 0.1266600626143074, 14.269546621047391, 8.839596550477692, 0.07277688956289405, 114.89995221232232, 6.745344564816065, 0.2657412720902432, -37.98335321733861, -4.28866897195367, 1461.9000807931593, 916.4180055877896], 
	[0.03470093471515179, 0.34240534117402144, 6.372920447586111, 6.467169087808298, 0.08642087845040186, 0.07205066613648745, 0.005542308785584003, 0.023889754604199377, 2.407915327655727, 25.984717377885595, 10.459770792351867, 0.126623221699139, 14.269546621047391, 4.792516777222875, 0.07176487857427247, 114.89995221232232, 6.782628542482854, 0.34006663403204723, -32.82084582024391, -4.004785428563391, 676.8990551503073, 916.4180055877896], 
	[0.4772801804723591, 0.2564761754950161, 6.404692167595571, 6.663893590081459, 0.03736024289812746, 0.03757098182203885, 0.005398070607462196, 0.023933348322956786, 2.450879163264583, 25.82197034285185, 10.461674620371362, 0.1272878459750605, 14.397363961827288, 8.82208433671952, 0.07269816651054578, 114.89995221232232, 6.745344564816065, 0.15482533522850295, -38.25178084975376, -4.164671725596966, 1062.7057383389295, 1201.3332180096036], 
	[0.6401149674072607, 0.2564761754950161, 6.404692167595571, 6.663893590081459, 0.08309356220269797, 0.04730910323368476, 0.005481947671584775, 0.023902522910854256, 2.479902730649699, 25.79828852941519, 10.463701154203202, 0.12680742627498093, 14.354758181567323, 6.592012772104467, 0.072665983829006, 114.89995221232232, 6.6707766094824885, 0.257131639820077, -38.194664346454246, -4.040674479240261, 654.2886324273312, 739.0918879843725], 
	[0.30497520178230025, 0.5411123454289446, 6.245716545368456, 6.570816498708409, 0.05987621104872645, 0.025705937814929504, 0.00542825116446181, 0.023861392110143168, 2.443909029152713, 25.89150295365039, 10.461735973277534, 0.1266600626143074, 14.269546621047391, 8.839596550477692, 0.07277688956289405, 114.89995221232232, 6.745344564816065, 0.2657412720902432, -37.98335321733861, -4.28866897195367, 984.0446854264704, 322.169056394549], 
	[0.560124592163518, 0.3096103796280726, 6.355965946047618, 6.529002458953041, 0.07088897003944679, 0.08665476919018061, 0.005542308785584003, 0.023418986481952765, 2.4643765276470977, 25.890967958490357, 10.467876927679221, 0.1266600626143074, 14.18433506052746, 7.618890679333809, 0.07302641255156889, 114.89995221232232, 6.6707766094824885, 0.282077857205856, -37.87622733368835, -4.072356103825943, 859.6125258488973, 1331.0721853241141], 
	[0.5446513290729289, 0.3096103796280726, 6.355965946047618, 6.663893590081459, 0.08309356220269797, 0.08771726587513007, 0.005481947671584775, 0.023902522910854256, 2.479902730649699, 25.79828852941519, 10.463701154203202, 0.12680742627498093, 14.354758181567323, 9.361117413679018, 0.072665983829006, 114.89995221232232, 6.6707766094824885, 0.21572046251332944, -37.38852207375201, -4.040674479240261, 1474.4968818011164, 1328.6539437998422], 
	[0.40990125524487886, 0.6322367699126255, 6.188602112430495, 6.5020910794650435, 0.05733251912629184, 0.027832860410392946, 0.005314193543339616, 0.023833029616086958, 2.479902730649699, 25.79828852941519, 10.463701154203202, 0.12680742627498093, 14.354758181567323, 9.086384251746178, 0.072665983829006, 114.89995221232232, 6.6707766094824885, 0.21572046251332944, -38.51253636187745, -4.040674479240261, 1474.4968818011164, 836.506778036165], 
	[0.8420578195720979, 0.6616256034246141, 6.441897708810233, 6.518992793258353, 0.04971173045577213, 0.0512756030222868, 0.005547072409676305, 0.024010638711424753, 2.4117968784063777, 25.961303062028954, 10.458726848982861, 0.12654953986880224, 14.226940840787424, 7.8576419655690675, 0.07182033144121648, 114.89995221232232, 6.819912520149643, 0.20026428107880628, -37.237080184752905, -4.012705834709812, 851.0834376998899, 846.2649815662407], 
	[0.5706404839992643, 0.6687308129494317, 6.189359266805735, 6.635659279290233, 0.055473470150064444, 0.00029569730317769994, 0.00542825116446181, 0.023861392110143168, 2.443909029152713, 25.89150295365039, 10.461735973277534, 0.1266600626143074, 14.269546621047391, 8.839596550477692, 0.07277688956289405, 114.89995221232232, 6.745344564816065, 0.21787914623891375, -37.98335321733861, -4.056515291533102, 1135.0056001722826, 1093.7541660327365], 
	[0.4772801804723591, 0.3135047521714488, 6.404692167595571, 6.663893590081459, 0.03736024289812746, 0.03757098182203885, 0.005398070607462196, 0.023933348322956786, 2.450879163264583, 25.82197034285185, 10.461674620371362, 0.1272878459750605, 14.397363961827288, 9.361117413679018, 0.072665983829006, 114.89995221232232, 6.708060587149276, 0.21950433977416367, -37.5752213864083, -4.062916980066408, 964.6280608962525, 908.7444557028156]])
	

def get_biophys(fname_inc=0,param_inc=0):
#	biophys = dict(zip(['k_ib','k_b','na_ib','na_b','nap_ib','nap_b','gl_ib','gl_b','amA','amB','amC','bmA','bmB','bmC','ahA','ahB','ahC','asA','asB','asC','gbar_ib','gbar_b'],[float(arg) for arg in sys.argv[1:]]))
	biophys = {}
	cell_fnames = ['STNroot_KMDD_11226_ne_no_multi.py','STNroot_KMDD_11226_ne_no_multi_section_labels.csv']
	if biophys == {}:
		params = get_biophys_params()
		biophys = dict(zip(['k_ib','k_b','na_ib','na_b','nap_ib','nap_b','gl_ib','gl_b','amA','amB','amC','bmA','bmB','bmC','ahA','ahB','ahC','asA','asB','asC','gbar_ib','gbar_b'],params[param_inc]))
		cell_fnames = [os.getcwd()+'/morphs/'+fname for fname in os.listdir(os.getcwd()+'/morphs/') if '.py' in fname]
		cell_fnames = [cell_fnames[fname_inc]]
		cell_fnames.append(cell_fnames[0][:-3]+'_section_labels.csv')
		cell_fnames.append(cell_fnames[0][:-3]+'_section_lengths.csv')	
	return(cell_fnames,biophys)

def write_data_files_for_swc(swc,centers,data,odir='/home/clayton/Desktop/Projects/ROOTS_HumanHDP/HumanHDP_simulations/VTKAnimation/',ts_range = range(250,576,2)):
	tsteps = len(data)
	with open(swc,'r') as f:
		lines = f.readlines()
	
	points = [line.strip().split(' ')[2:5] for line in lines]
	for p,point in enumerate(points):
		points[p] = [float(item) for item in point]
	
	for ts in ts_range:
		datafile_lines = []
		for point in points:
			datafile_lines.append(get_point_solution_tstep(point,centers,data[ts]))
		
		with open(odir+'datafile'+str(ts)+'.dat','w') as f:
			for line in datafile_lines[:-1]:
				f.write(line+'\n')
			
			f.write(datafile_lines[-1])

def write_data_file_for_swc(swc,centers,data,oname='datafile.dat'):
	with open(swc,'r') as f:
		lines = f.readlines()
	
	points = [line.strip().split(' ')[2:5] for line in lines]
	for p,point in enumerate(points):
		points[p] = [float(item) for item in point]
	
	datafile_lines = []
	for point in points:
		datafile_lines.append(get_point_solution_tstep(point,centers,data))
	
	with open(oname,'w') as f:
		for line in datafile_lines[:-1]:
			f.write(line+'\n')
		
		f.write(datafile_lines[-1])

def get_point_solution_tstep(point,centers,data):
	return(str(data[np.argmin(cdist(np.array([point]),centers))]))

def midpoint(a,b):
	return(((a[0]+b[0])/2.0,(a[1]+b[1])/2.0,(a[2]+b[2])/2.0))

def return_ends_and_middle(li):
	if len(li)%2==1 and len(li)>2:
		return([li[0],li[int(len(li)/2)],li[-1]])
	
	if len(li)%2==0 and len(li)>3:
		return([li[0],midpoint(li[int(len(li)/2)-1],li[int(len(li)/2)]),li[-1]])
		
	else:
		return(li)


def simplify_cell_before_visualization(cell):
	for section in cell.all:
		section.push()
		n3d = section.n3d()
		d = section.diam
		newpoints = return_ends_and_middle(list(zip([h.x3d(i) for i in range(n3d)],[h.y3d(i) for i in range(n3d)],[h.z3d(i) for i in range(n3d)])))
		section.pt3dclear()
		x = [item[0] for item in newpoints]
		y = [item[1] for item in newpoints]
		z = [item[2] for item in newpoints]
		d = [d for i in x]
		h.pt3dadd(h.Vector(x),h.Vector(y),h.Vector(z),h.Vector(d),sec=section)
		h.pop_section()
	
	return(cell)

#works ='8074,11861,11498,10921,10314,3205,3661,13124,13865,5894,8870,5358,13456,13820,12286,11072,4062,1556,12016,3901,4886,6035,3963,7787,12202,2511,8645,6574,5887,8317,11226,1412,10352,12345,10084,6433,11634,11265,3568,4579,9711,9602,6735,12840,9096,12804,13663,5289,8028,12610,10763,9146,9454,3147,10834,6381,10662,12691,12647,11001,8588,11023,10386,13695,3701'.split(',')
#multi_spikes = '2682,11967,11768,12501,11606,10956,8749,11214,2148'.split(',')
#spikes_early = '8357,12801,9426,13585,13885,130,11592,12271,1663,2290,11737,11380,10751,4484,6949,13849,3012,12578,11198,11994,13521,4212,13528,723,9031'.split(',')

class ThresholdSearch():
	def __init__(self,searchparams=np.arange(0.2,2.0,0.01)):
		self.searchparams = searchparams
		self.bools = [None for i in self.searchparams]
		self.atmargin = False
	
	def get_low_high(self):
		low = 0
		high = len(self.bools)-1
		for i in range(len(self.bools)):
			if self.bools[i] == False and i > low:
				low = i
			if self.bools[i] == True and i < high:
				high = i
		
		return(low,high)
	
	def at_margin(self):
		for b in range(len(self.bools[:-1])):
			if self.bools[b]==False and self.bools[b+1]==True:
				self.atmargin = True
				return(True,b+1)
			
		self.atmargin = False
		return(False,None)
	
	def update_bools(self):
		self.low,self.high = self.get_low_high()
		for i in range(len(self.bools)):
			if i < self.low:
				self.bools[i] = False
			if i > self.high:
				self.bools[i] = True
	
	def get_new_search_param(self):
		self.update_bools()
		return(int((self.low+self.high)/2))


def suprathreshold(data):
	cost = off_cost_function(data)
	if cost == 0:
		return(False)
	else:
		return(True)


def find_threshold(topparams,stims = np.arange(0.02,2.75,0.04)):
	print('Starting cell '+str(topparams[0]))
	cell_number = topparams[0]
	diam = topparams[1]
	cell_fnames,biophys = get_biophys(cell_number,50)
	threshfinder = ThresholdSearch(stims)
	threshfinder.update_bools()
#	print(threshfinder.bools,threshfinder.low,threshfinder.high)
	cell,low_data,stim,centers,solutions,sptimes = run_cell_modifybiophys(cell_fnames[0],cell_number,threshfinder.searchparams[threshfinder.low],[cell_fnames[0],cell_fnames[1],cell_fnames[2]],plot=False,biophysics=biophys,outer=diam)
	threshfinder.bools[0] = suprathreshold(low_data)
	if suprathreshold(low_data) == True:
		print('stim range not low enough')
		return(None)
	
	cell,high_data,stim,centers,solutions,sptimes = run_cell_modifybiophys(cell_fnames[0],cell_number,threshfinder.searchparams[threshfinder.high],[cell_fnames[0],cell_fnames[1],cell_fnames[2]],plot=False,biophysics=biophys,outer=diam)
	threshfinder.bools[-1] = suprathreshold(high_data)
	if suprathreshold(high_data) == False:
		print('stim range not high enough')
		return(None)
	
	while not threshfinder.atmargin:
		searchparam = threshfinder.get_new_search_param()
		cell,data,stim,centers,solutions,sptimes = run_cell_modifybiophys(cell_fnames[0],cell_number,threshfinder.searchparams[searchparam],[cell_fnames[0],cell_fnames[1],cell_fnames[2]],plot=False,biophysics=biophys,outer=diam)
		threshfinder.bools[searchparam] = suprathreshold(data)
		threshfinder.update_bools()
#		print(threshfinder.bools,threshfinder.atmargin)
		margin,ind = threshfinder.at_margin()
	
	with open(os.getcwd()+'/morphs/'+'multipro_bipolar_thresholds.txt','a') as f:
		f.write(str(cell_number)+' '+str(stims[ind])+'\n')
	
	print('Cell number '+str(cell_number)+' threshold is '+str(stims[ind]))
	return(stims[ind])

def load_threshold(cellnum):
	dat = pd.read_csv(os.getcwd()+'/morphs/'+'multipro_bipolar_thresholds.txt',names=['cell','value'],delimiter=' ',index_col=None)
	thresholds = dict(zip(dat.cell.values,dat.value.values))
	return(thresholds[cellnum])

if __name__ == "__main__":
	#run_cell_estimate_threshold_bipolar params - cellname,cellnum,stimamp_scalar,fnames,plot=True,electrode=[2,3],biophysics={},write_sptimes=False,outer=4.0
	if len(sys.argv)>1:
		cellnum = int(sys.argv[1])
		diam = int(sys.argv[2])
		if len(sys.argv)>3:
			action = sys.argv[3]
			margin = sys.argv[4]
			try:
				demean = sys.argv[5]
			except:
				demean = None
			
			if action == 'show':
				cell_fnames,biophys = get_biophys(cellnum,50)
				if demean is None:
					stimvalue = load_threshold(cellnum)
				else:
					stimvalue = 0.0
				print(cellnum,stimvalue+float(margin))
				if demean is not None:
					cell,data,stim,centers,solutions,sptimes = run_cell_modifybiophys(cell_fnames[0],cellnum,stimvalue+float(margin),[cell_fnames[0],cell_fnames[1],cell_fnames[2]],plot=False,biophysics=biophys,write_sptimes=True,outer=diam)
				else:
					cell,data,stim,centers,solutions,sptimes = run_cell_modifybiophys(cell_fnames[0],cellnum,stimvalue+float(margin),[cell_fnames[0],cell_fnames[1],cell_fnames[2]],plot=True,biophysics=biophys,outer=diam)

#				print(cell_fnames)
		else:
			find_threshold([cellnum,diam])
	
#	numthreads = multiprocessing.cpu_count()-2
#	
#	with open('multipro_contact4_thresholds.txt','w') as f:
#		pass
#	
#	pool = ThreadPool(numthreads)
#	pool.map(find_threshold,list(zip(range(100),[4 for i in range(100)])))

#	thresholds = []
#	for i in range(100):
#		thresholds.append(find_threshold([i,1]))
#	
#	with open('contact1_thresholds.pickle','wb') as f:
#		import pickle
#		pickle.dump(thresholds,f)
#	
#	print('wrote contact 1')
#	
#	thresholds = []
#	for i in range(100):
#		thresholds.append(find_threshold([i,2]))
#	
#	with open('contact2_thresholds.pickle','wb') as f:
#		import pickle
#		pickle.dump(thresholds,f)
#	
#	print('wrote contact 2')
#	
#	thresholds = []
#	for i in range(100):
#		thresholds.append(find_threshold([i,3]))
#	
#	with open('contact3_thresholds.pickle','wb') as f:
#		import pickle
#		pickle.dump(thresholds,f)
#	
#	print('wrote contact 3')
#	
#	thresholds = []
#	for i in range(100):
#		thresholds.append(find_threshold([i,4]))

#	with open('contact4_thresholds.pickle','wb') as f:
#		import pickle
#		pickle.dump(thresholds,f)

#	print('wrote contact 4')
	
##	threshold = find_threshold(0)
#	threshold = 0.91+0.08
#	write_results = False
#	write_stimulation = False
#	import sys
#	sys.setrecursionlimit(10**6)
#	for i in range(0,100):
#		cell_fnames,biophys = get_biophys(i,50)
#		cell_number = cell_fnames[0].split('/')[-1].split('_')[2]
#		print('biophysics '+str(50),cell_fnames[0],i)
#		cell,on_data,stim,centers,solutions = run_cell_modifybiophys(threshold,[cell_fnames[0],cell_fnames[1]],plot=True,biophysics=biophys)
#		break


#		########Write data for animation in paraview
#		if write_results or write_stimulation:
#			anim_dir = '/home/clayton/Desktop/Projects/ROOTS_HumanHDP/HumanHDP_simulations/VTKAnimation/'
#			cell = simplify_cell_before_visualization(cell)
#			neuron2swc('out_test'+str(i)+'.swc')
#			del(cell)
#		
#		if write_stimulation:
#			write_data_file_for_swc('out_test'+str(i)+'.swc',centers,solutions,oname=os.getcwd()+'/'+'datafile'+str(i)+'.dat')
#			vtktool = vtkgen()
#			vtktool.add_swc('out_test'+str(i)+'.swc')
#			vtktool.add_datafile('datafile'+str(i)+'.dat')
#			vtktool.write_vtk('stimulus'+str(i)+'.vtk')
#			vtktool.clear_datafile()
#		
#		if write_results:
#			tsrange = range(250,576,2)
#			write_data_files_for_swc('out_test.swc',centers,on_data,ts_range=tsrange)
#			vtktool = vtkgen()
##			vtkgen.set_draw_mode(0)
#			vtktool.add_swc('out_test.swc')
#			for ts in tsrange:
#				vtktool.add_datafile(anim_dir+'datafile'+str(ts)+'.dat')
#				vtktool.write_vtk(anim_dir+'simple'+str(ts)+'.vtk')
#				vtktool.clear_datafile()
##	
#	if write_stimulation:
#	vtktool = vtkgen()
#	vtktool.set_draw_mode(0)
#	import sys
#	sys.setrecursionlimit(10**6)
#	cell = simplify_cell_before_visualization(cell)
#	neuron2swc('out_test'+str(cellnum)+'.swc')
#	write_data_file_for_swc('out_test'+str(cellnum)+'.swc',centers,solutions,oname=os.getcwd()+'/'+'datafile'+str(cellnum)+'.dat')
#	vtktool.add_swc('out_test'+str(cellnum)+'.swc')
#	vtktool.add_datafile('datafile'+str(cellnum)+'.dat')
#	vtktool.write_vtk('combined'+str(cellnum)+'.vtk', radius_data=True)
#	vtktool.clear_datafile()

